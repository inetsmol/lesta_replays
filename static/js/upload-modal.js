// static/js/upload-modal.js
document.addEventListener('DOMContentLoaded', function () {
    // === –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –¥–≤–∞–∂–¥—ã) ===
    if (window.__uploadModalInitialized__) {
        console.warn('upload-modal.js: already initialized ‚Äî skipping duplicate init');
        return;
    }
    window.__uploadModalInitialized__ = true;

    console.log('Upload modal script loaded');

    // === –≠–ª–µ–º–µ–Ω—Ç—ã ===
    const uploadBtn    = document.getElementById('upload-replay-btn');
    const modal        = document.getElementById('upload-modal');
    const modalOverlay = document.getElementById('modal-overlay');
    const modalClose   = document.getElementById('modal-close');
    const uploadForm   = document.getElementById('upload-form');
    const uploadArea   = document.getElementById('upload-area');
    const fileInput    = document.getElementById('file-input');
    const selectedFile = document.getElementById('selected-file');
    const fileInfo     = document.getElementById('file-info');
    const cancelBtn    = document.getElementById('cancel-upload');
    const submitBtn    = document.getElementById('submit-upload');
    const uploadStatus = document.querySelector('.upload-status');

    if (!uploadBtn || !modal) {
        console.error('Upload button or modal not found');
        return;
    }

    let currentFile = null;

    // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º ===
    function openModal() {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeModal() {
        modal.classList.remove('active');
        document.body.style.overflow = '';
        resetForm();
    }

    function resetForm() {
        currentFile = null;
        if (fileInput) fileInput.value = '';
        if (selectedFile) selectedFile.style.display = 'none';
        if (fileInfo) fileInfo.innerHTML = '';
        if (submitBtn) submitBtn.disabled = true;
        updateUploadStatus('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', false);
    }

    function updateUploadStatus(text, loading = false) {
        if (!uploadStatus) return;
        uploadStatus.innerHTML = loading
            ? `<span class="upload-spinner"></span>${text}`
            : text;
    }

    // === –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ ===
    function validateFile(file) {
        const maxSize = 50 * 1024 * 1024; // 50MB
        const allowedExtensions = ['.mtreplay'];
        const dot = file.name.lastIndexOf('.');
        const fileExtension = dot >= 0 ? file.name.toLowerCase().slice(dot) : '';

        if (!allowedExtensions.includes(fileExtension)) {
            showMessage('–§–∞–π–ª –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .mtreplay —Ñ–∞–π–ª—ã.', 'error');
            return false;
        }
        if (file.size > maxSize) {
            showMessage('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB.', 'error');
            return false;
        }
        return true;
    }

    // === –°–æ–æ–±—â–µ–Ω–∏—è ===
    function createMessagesContainer() {
        const container = document.createElement('div');
        container.className = 'messages';
        const contentDiv = document.querySelector('#content .container') || document.body;
        contentDiv.insertBefore(container, contentDiv.firstChild);
        return container;
    }

    function showMessage(text, type = 'info') {
        const messagesContainer = document.querySelector('.messages') || createMessagesContainer();
        const messageDiv = document.createElement('div');
        messageDiv.className = `message message--${type}`;
        messageDiv.textContent = text;
        messagesContainer.appendChild(messageDiv);
        setTimeout(() => messageDiv.remove(), 5000);
    }

    // === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ ===
    function updateFileInfo() {
        if (!selectedFile || !fileInfo) return;

        if (!currentFile) {
            selectedFile.style.display = 'none';
            if (submitBtn) submitBtn.disabled = true;
            return;
        }

        selectedFile.style.display = 'block';
        if (submitBtn) submitBtn.disabled = false;

        // –ø–µ—Ä–µ–¥–∞—ë–º event, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–ø–ª—ã—Ç–∏–µ –∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
        fileInfo.innerHTML = `
            <div class="file-icon">üìÑ</div>
            <div class="file-details">
                <div class="file-name">${currentFile.name}</div>
                <div class="file-size">${formatFileSize(currentFile.size)}</div>
            </div>
            <button type="button" class="file-remove" onclick="removeCurrentFile(event)">‚úï</button>
        `;
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    window.removeCurrentFile = function (e) {
        // –Ω–µ –¥–∞—ë–º –∫–ª–∏–∫—É –ø–æ ‚úï –≤—Å–ø–ª—ã—Ç—å –¥–æ uploadArea –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        if (e && typeof e.stopPropagation === 'function') e.stopPropagation();
        currentFile = null;
        updateFileInfo();
    };

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
    }

    function handleFile(file) {
        if (validateFile(file)) {
            currentFile = file;
            updateFileInfo();
            showMessage(`–§–∞–π–ª –≤—ã–±—Ä–∞–Ω: ${file.name}`, 'success');
        }
    }

    // === ¬´–ó–∞–º–æ–∫¬ª –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ) ===
    let isFileDialogOpen = false;

    function openFilePickerOnce() {
        // –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if (isFileDialogOpen) return;

        isFileDialogOpen = true;

        // –æ—á–∏—â–∞–µ–º value, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞ —Å—Ä–∞–±–æ—Ç–∞–ª
        if (fileInput) fileInput.value = '';
        fileInput.click();

        // —Å–Ω–∏–º–∞–µ–º ¬´–∑–∞–º–æ–∫¬ª, –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∏–ª–∏ —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω
        const release = () => {
            isFileDialogOpen = false;
            window.removeEventListener('focus', release, true);
            fileInput.removeEventListener('change', release);
        };

        // –∫–æ–≥–¥–∞ –¥–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ñ–æ–∫—É—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–∫–Ω—É
        window.addEventListener('focus', release, true);
        // –ª–∏–±–æ —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω
        fileInput.addEventListener('change', release, { once: true });
    }

    // === –°–æ–±—ã—Ç–∏—è ===
    uploadBtn.addEventListener('click', function (e) {
        e.preventDefault();
        openModal();
    });

    if (modalClose) {
        modalClose.addEventListener('click', function (e) {
            e.preventDefault();
            closeModal();
        });
    }

    if (cancelBtn) {
        cancelBtn.addEventListener('click', function (e) {
            e.preventDefault();
            closeModal();
        });
    }

    if (modalOverlay) {
        modalOverlay.addEventListener('click', function (e) {
            if (e.target === modalOverlay) closeModal();
        });
    }

    document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape' && modal.classList.contains('active')) closeModal();
    });

    // –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ input
    if (fileInput) {
        fileInput.addEventListener('change', function (e) {
            // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥ –±–µ–∑ –≤—ã–±–æ—Ä–∞ ‚Äî —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç
            if (!e.target.files || e.target.files.length === 0) return;
            handleFile(e.target.files[0]);
        });

        // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –Ω–µ –¥–∞—ë–º –∫–ª–∏–∫—É –ø–æ —Å–∞–º–æ–º—É input –≤—Å–ø–ª—ã—Ç—å
        fileInput.addEventListener('click', (e) => e.stopPropagation());
    }

    // –∫–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ–¥–∏–Ω —Ä–∞–∑
    if (uploadArea) {
        uploadArea.addEventListener('click', function (e) {
            // –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ –µ—ë –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º) ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (e.target.closest && e.target.closest('.file-remove')) return;
            if (!fileInput) return;
            openFilePickerOnce();
        });

        // Drag & Drop
        let dragCounter = 0;

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(ev =>
            uploadArea.addEventListener(ev, (e) => e.preventDefault())
        );

        uploadArea.addEventListener('dragenter', function () {
            dragCounter++;
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', function () {
            dragCounter--;
            if (dragCounter <= 0) {
                dragCounter = 0;
                uploadArea.classList.remove('dragover');
            }
        });

        uploadArea.addEventListener('drop', function (e) {
            dragCounter = 0;
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer?.files;
            if (files && files.length > 0) handleFile(files[0]);
        });
    }

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    if (uploadForm) {
        uploadForm.addEventListener('submit', function (e) {
            e.preventDefault();

            if (!currentFile) {
                showMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
                return;
            }

            const formData = new FormData();
            const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]');
            if (csrfToken) formData.append('csrfmiddlewaretoken', csrfToken.value);
            formData.append('file', currentFile);

            if (submitBtn) submitBtn.disabled = true;
            updateUploadStatus('–ó–∞–≥—Ä—É–∑–∫–∞...', true);

            fetch(uploadForm.action, {
                method: 'POST',
                body: formData,
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
.then(response => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
        return response.json().then(data => {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç
    if (response.redirected) {
        window.location.href = response.url;
        return null;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ JSON –æ—Ç–≤–µ—Ç
    return response.json();
})
    .then(data => {
        if (data === null) return; // –†–µ–¥–∏—Ä–µ–∫—Ç —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª

        if (data.success) {
            showMessage(data.message, 'success');
            closeModal();
            if (data.redirect_url) {
                window.location.href = data.redirect_url;
            }
        } else {
            showMessage(data.error, 'error');
            closeModal();
            if (data.redirect_url) {
                setTimeout(() => {
                    window.location.href = data.redirect_url;
                }, 2000); // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            }
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        showMessage(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞', 'error');
        closeModal();
        setTimeout(() => {
            window.location.href = '/'; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É
        }, 2000);
    })
    .finally(() => {
        updateUploadStatus('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', false);
        if (submitBtn) submitBtn.disabled = false;
    });
        });
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º drag&drop –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        document.addEventListener(eventName, function (e) {
            e.preventDefault();
            e.stopPropagation();
        });
    });

    console.log('Upload modal initialized successfully');
});
