#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø–ª–µ—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/analyze_queries.py <replay_id>

–ü—Ä–∏–º–µ—Ä:
    python scripts/analyze_queries.py 1
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –í–ê–ñ–ù–û: –í–∫–ª—é—á–∞–µ–º DEBUG –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
os.environ['DJANGO_DEBUG'] = 'True'

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lesta_replays.settings')
django.setup()

from django.test import RequestFactory
from django.db import connection
from django.db import reset_queries
from replays.views import ReplayDetailView
from replays.models import Replay


def analyze_queries(replay_id: int):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø–ª–µ—è.

    Args:
        replay_id: ID —Ä–µ–ø–ª–µ—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        replay = Replay.objects.select_related('tank', 'owner', 'user', 'map').get(pk=replay_id)
    except Replay.DoesNotExist:
        print(f"‚ùå –†–µ–ø–ª–µ–π —Å ID {replay_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"üîç –ê–Ω–∞–ª–∏–∑ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–ø–ª–µ—è ID={replay_id}")
    print(f"   –¢–∞–Ω–∫: {replay.tank.name if replay.tank else 'N/A'}")
    print(f"   –ò–≥—Ä–æ–∫: {replay.owner.real_name if replay.owner else 'N/A'}")
    print(f"   –î–∞—Ç–∞ –±–æ—è: {replay.battle_date}\n")

    factory = RequestFactory()
    reset_queries()

    request = factory.get(f'/replays/{replay_id}/')
    view = ReplayDetailView()
    view.request = request
    view.object = replay

    try:
        context = view.get_context_data()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return

    print("=" * 100)
    print(f"üìä –í–°–ï–ì–û –í–´–ü–û–õ–ù–ï–ù–û –ó–ê–ü–†–û–°–û–í: {len(connection.queries)}")
    print("=" * 100)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ç–∏–ø—É
    query_types = {}
    for query in connection.queries:
        sql = query['sql'].strip()
        sql_type = sql.split()[0].upper()
        query_types[sql_type] = query_types.get(sql_type, 0) + 1

    print(f"\nüìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for sql_type, count in sorted(query_types.items()):
        print(f"   {sql_type:10s}: {count:3d} –∑–∞–ø—Ä–æ—Å–æ–≤")

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    print(f"\n{'='*100}")
    print("üîé –î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–ü–†–û–°–û–í:")
    print(f"{'='*100}\n")

    for i, query in enumerate(connection.queries, 1):
        sql = query['sql'].strip()
        time = float(query['time']) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if 'FROM' in sql.upper():
            table_start = sql.upper().index('FROM') + 5
            table_part = sql[table_start:].split()[0]
            table = table_part.strip('`"').split('.')[0]
        else:
            table = "N/A"

        print(f"–ó–∞–ø—Ä–æ—Å #{i:2d} ({time:.3f} –º—Å) - –¢–∞–±–ª–∏—Ü–∞: {table}")
        print(f"   {sql[:200]}{'...' if len(sql) > 200 else ''}")
        print()

    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    sql_counts = {}
    for query in connection.queries:
        sql = query['sql'].strip()
        # –£–ø—Ä–æ—â–∞–µ–º SQL –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—É–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID)
        simplified = sql.split('WHERE')[0] if 'WHERE' in sql else sql
        sql_counts[simplified] = sql_counts.get(simplified, 0) + 1

    duplicates = {k: v for k, v in sql_counts.items() if v > 1}
    if duplicates:
        print(f"\n{'='*100}")
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ó–ê–ü–†–û–°–´:")
        print(f"{'='*100}\n")
        for sql, count in sorted(duplicates.items(), key=lambda x: x[1], reverse=True):
            print(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {count}")
            print(f"   {sql[:200]}{'...' if len(sql) > 200 else ''}")
            print()

    print(f"{'='*100}")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
    print(f"{'='*100}")


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/analyze_queries.py <replay_id>")
        print("   –ü—Ä–∏–º–µ—Ä: python scripts/analyze_queries.py 1")
        sys.exit(1)

    try:
        replay_id = int(sys.argv[1])
    except ValueError:
        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–ø–ª–µ—è: {sys.argv[1]}")
        sys.exit(1)

    analyze_queries(replay_id)
