#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ (—Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏) –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø–ª–µ—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/benchmark_replay_detail.py <replay_id> [runs]

–ü—Ä–∏–º–µ—Ä:
    python scripts/benchmark_replay_detail.py 1 10
"""

import os
import sys
import django
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lesta_replays.settings')
django.setup()

from django.test import RequestFactory
from django.db import connection
from django.db import reset_queries
from replays.views import ReplayDetailView
from replays.models import Replay


def benchmark_replay_detail(replay_id: int, runs: int = 10):
    """
    –ò–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø–ª–µ—è.

    Args:
        replay_id: ID —Ä–µ–ø–ª–µ—è –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞
        runs: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        replay = Replay.objects.select_related('tank', 'owner', 'user', 'map').get(pk=replay_id)
    except Replay.DoesNotExist:
        print(f"‚ùå –†–µ–ø–ª–µ–π —Å ID {replay_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"üî• –ë–µ–Ω—á–º–∞—Ä–∫ —Ä–µ–ø–ª–µ—è ID={replay_id}")
    print(f"   –¢–∞–Ω–∫: {replay.tank.name if replay.tank else 'N/A'}")
    print(f"   –ò–≥—Ä–æ–∫: {replay.owner.real_name if replay.owner else 'N/A'}")
    print(f"   –î–∞—Ç–∞ –±–æ—è: {replay.battle_date}")
    print(f"   –ó–∞–ø—É—Å–∫–æ–≤: {runs}\n")

    factory = RequestFactory()
    times = []
    query_counts = []

    # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫–µ—à
    request = factory.get(f'/replays/{replay_id}/')
    view = ReplayDetailView()
    view.request = request
    view.object = replay
    try:
        _ = view.get_context_data()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ: {e}")
        return

    print("‚è±Ô∏è  –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞...")

    for i in range(runs):
        reset_queries()

        request = factory.get(f'/replays/{replay_id}/')
        view = ReplayDetailView()
        view.request = request
        view.object = replay

        start_time = time.perf_counter()
        try:
            context = view.get_context_data()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {i+1}: {e}")
            continue
        end_time = time.perf_counter()

        elapsed = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        times.append(elapsed)
        query_counts.append(len(connection.queries))

        print(f"   –ó–∞–ø—É—Å–∫ {i+1:2d}: {elapsed:6.2f} –º—Å, SQL –∑–∞–ø—Ä–æ—Å–æ–≤: {len(connection.queries)}")

    if not times:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    avg_time = sum(times) / len(times)
    min_time = min(times)
    max_time = max(times)
    avg_queries = sum(query_counts) / len(query_counts)

    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê")
    print("=" * 80)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:       {avg_time:6.2f} –º—Å")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:   {min_time:6.2f} –º—Å")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:  {max_time:6.2f} –º—Å")
    print(f"–°—Ä–µ–¥–Ω–µ–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤: {avg_queries:5.1f}")
    print("=" * 80)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    reset_queries()
    request = factory.get(f'/replays/{replay_id}/')
    view = ReplayDetailView()
    view.request = request
    view.object = replay
    _ = view.get_context_data()

    print(f"\nüìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫):")
    query_types = {}
    for query in connection.queries:
        sql = query['sql'].strip().split()[0].upper()
        query_types[sql] = query_types.get(sql, 0) + 1

    for sql_type, count in sorted(query_types.items()):
        print(f"   {sql_type:10s}: {count:3d} –∑–∞–ø—Ä–æ—Å–æ–≤")

    print(f"\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à—ë–Ω")


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/benchmark_replay_detail.py <replay_id> [runs]")
        print("   –ü—Ä–∏–º–µ—Ä: python scripts/benchmark_replay_detail.py 1 10")
        sys.exit(1)

    try:
        replay_id = int(sys.argv[1])
    except ValueError:
        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–ø–ª–µ—è: {sys.argv[1]}")
        sys.exit(1)

    runs = 10
    if len(sys.argv) >= 3:
        try:
            runs = int(sys.argv[2])
        except ValueError:
            print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤: {sys.argv[2]}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10")

    benchmark_replay_detail(replay_id, runs)
