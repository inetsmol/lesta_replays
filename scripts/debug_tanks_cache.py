#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ tanks_cache.
"""

import os
import sys
import django
from pathlib import Path

project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lesta_replays.settings')
django.setup()

from replays.models import Replay, Tank
from replays.parser.replay_cache import ReplayDataCache


def debug_tanks_cache(replay_id: int):
    try:
        replay = Replay.objects.get(pk=replay_id)
    except Replay.DoesNotExist:
        print(f"‚ùå –†–µ–ø–ª–µ–π —Å ID {replay_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ tanks_cache –¥–ª—è —Ä–µ–ø–ª–µ—è ID={replay_id}\n")

    # –°–æ–∑–¥–∞–µ–º –∫–µ—à
    cache = ReplayDataCache(replay.payload)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ vehicleId –∏–∑ —Ä–µ–ø–ª–µ—è (–∫–∞–∫ –≤ _preload_tanks)
    tank_tags = set()

    # –¢–∞–Ω–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ–ø–ª–µ—è
    player_vehicle = cache.first_block.get("playerVehicle")
    if player_vehicle and ":" in player_vehicle:
        _, tag = player_vehicle.split(":", 1)
        tank_tags.add(tag)
        print(f"üìå –¢–∞–Ω–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {player_vehicle} -> tag: {tag}")

    # –¢–∞–Ω–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—è
    print(f"\nüìå –¢–∞–Ω–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—è:")
    for avatar_id, avatar_data in cache.avatars.items():
        if isinstance(avatar_data, dict):
            vehicle_type = avatar_data.get("vehicleType", "")
            if ":" in vehicle_type:
                _, tag = vehicle_type.split(":", 1)
                tank_tags.add(tag)
                print(f"   Avatar {avatar_id}: {vehicle_type} -> tag: {tag}")

    print(f"\nüìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ —Ç–∞–Ω–∫–æ–≤: {len(tank_tags)}")
    print(f"   –¢–µ–≥–∏: {sorted(tank_tags)}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–Ω–∫–∏ –∏–∑ –ë–î
    tanks = Tank.objects.filter(vehicleId__in=tank_tags)
    tanks_cache = {t.vehicleId: t for t in tanks}

    print(f"\nüì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∞–Ω–∫–æ–≤ –∏–∑ –ë–î: {len(tanks_cache)}")
    print(f"   vehicleId –≤ –∫–µ—à–µ: {sorted(tanks_cache.keys())}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã
    missing_tags = tank_tags - set(tanks_cache.keys())
    if missing_tags:
        print(f"\n‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù–´ –í –ë–î: {sorted(missing_tags)}")
    else:
        print(f"\n‚úÖ –í—Å–µ —Ç–∞–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ extractor
    print(f"\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ _build_player_data:")

    raw = cache.avatars
    vehicles_stats = cache.vehicles

    for avatar_id in list(raw.keys())[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        avatar_data = raw.get(avatar_id, {})
        vehicle_type = str(avatar_data.get("vehicleType", ""))

        if ":" in vehicle_type:
            vehicle_nation, vehicle_tag = vehicle_type.split(":", 1)
        else:
            vehicle_nation, vehicle_tag = "", vehicle_type

        print(f"\n   Avatar {avatar_id}:")
        print(f"      vehicle_type: {vehicle_type}")
        print(f"      vehicle_tag: {vehicle_tag}")
        print(f"      –ù–∞–π–¥–µ–Ω –≤ tanks_cache: {vehicle_tag in tanks_cache}")

        if vehicle_tag in tanks_cache:
            tank = tanks_cache[vehicle_tag]
            print(f"      –¢–∞–Ω–∫: {tank.name} (level {tank.level})")


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/debug_tanks_cache.py <replay_id>")
        sys.exit(1)

    try:
        replay_id = int(sys.argv[1])
    except ValueError:
        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–ø–ª–µ—è: {sys.argv[1]}")
        sys.exit(1)

    debug_tanks_cache(replay_id)
