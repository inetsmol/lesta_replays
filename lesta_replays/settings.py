"""
Django settings for lesta_replays project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import logging
import os
from pathlib import Path

import sentry_sdk
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--_($r!rg(efg8u4q4crkd*569bz$moq*f^==nu&zz1#4=^-hpy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() in ("1", "true", "yes")

ALLOWED_HOSTS = ["lesta-replays.ru", "localhost", "127.0.0.1", "192.168.67.5", "192.168.67.101"]

CSRF_TRUSTED_ORIGINS = [
    "https://lesta-replays.ru",
]

# Сообщаем Django, что он за обратным прокси и реальная схема приходит в заголовке:
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True  # пробрасывать Host от прокси (полезно при нескольких доменах)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    "django.contrib.sitemaps",

    "django.contrib.sites",
    # allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.yandex",
    "django_comments_xtd",
    "django_comments",

    'replays',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'lesta_replays.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "replays.context_processors.sidebar_widgets",
            ],
        },
    },
]

WSGI_APPLICATION = 'lesta_replays.wsgi.application'


# ---------------------------------------------------------------------------
# АУТЕНТИФИКАЦИЯ / django-allauth
# ---------------------------------------------------------------------------
AUTHENTICATION_BACKENDS = [
    # По умолчанию
    "django.contrib.auth.backends.ModelBackend",
    # allauth
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Базовые настройки аккаунта
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # обязательное подтверждение email
ACCOUNT_EMAIL_REQUIRED = True
# None => показывать чекбокс "Запомнить меня" на форме логина
ACCOUNT_SESSION_REMEMBER = None

# Метод аутентификации: username_email позволяет войти как по username, так и по email
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_USERNAME_REQUIRED = True

# Новые настройки allauth (взамен устаревших предупреждений)
ACCOUNT_LOGIN_METHODS = {"email", "username"}  # вход по email
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*", "username"]
ACCOUNT_RATE_LIMITS = {
    "login_failed": "5/5m",  # 5 попыток за 5 минут
}
# Подтверждение email: подтверждать по GET и перенаправлять на страницу логина
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = "/accounts/login/"
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "/accounts/login/"

# Кастомная форма регистрации
ACCOUNT_FORMS = {
    'signup': 'replays.forms.CustomSignupForm',
}

# Email
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@lesta-replays.ru")
if DEBUG:
    EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend")
else:
    EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
    EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.yandex.ru")
    EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
    EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "true").lower() in ("1", "true", "yes")
    EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "false").lower() in ("1", "true", "yes")

# ---------------------------------------------------------------------------
# БАЗА ДАННЫХ
# ---------------------------------------------------------------------------
# По умолчанию — SQLite в DEV. Можно переключить на PostgreSQL через USE_POSTGRES=1.
if os.getenv("USE_POSTGRES", "0") == "1":
    # PostgreSQL — чтение параметров из окружения
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": os.getenv("POSTGRES_HOST"),
            "PORT": int(os.getenv("POSTGRES_PORT", "5432")),
            "CONN_MAX_AGE": 60,  # держим соединения открытыми
            # "OPTIONS": {"sslmode": "require"},  # если используешь внешний managed-PG
        }
    }
else:
    # Лёгкая SQLite для локальной разработки
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "lesta_replays.storage.ForgivingManifestStaticFilesStorage",
    },
}
WHITENOISE_MANIFEST_STRICT = False

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]  # для dev
STATIC_ROOT = BASE_DIR / "staticfiles"  # куда 'collectstatic' сложит финальные файлы

# МЕДИА / ФАЙЛЫ РЕПЛЕЕВ
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Прод. защита:
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_SSL_REDIRECT = not DEBUG


# ===========================================================================
# НАСТРОЙКИ DJANGO-COMMENTS-XTD
# ===========================================================================

SITE_ID = int(os.getenv("SITE_ID", 1))

# Основные настройки комментариев
COMMENTS_APP = 'django_comments_xtd'

# КРИТИЧЕСКИ ВАЖНО: отключаем подтверждение email для анонимных пользователей
COMMENTS_XTD_CONFIRM_EMAIL = False

# Максимальная вложенность ответов
COMMENTS_XTD_MAX_THREAD_LEVEL = 3

# Порядок отображения комментариев
COMMENTS_XTD_LIST_ORDER = ('-thread_id', 'order')

# Кастомная форма (только имя и текст) - используем стандартный параметр
COMMENTS_XTD_FORM_CLASS = 'replays.forms.SimpleCommentForm'

# Модерация комментариев
COMMENTS_XTD_APP_MODEL_OPTIONS = {
    'replays.replay': {
        'who_can_post': 'users',  # Разрешить комментировать только залогиненным
        'allow_flagging': True,      # Разрешить жалобы на комментарии
        'allow_feedback': True,       # Разрешить лайки/дизлайки
        'show_feedback': True,        # Показывать счетчик лайков
    }
}

YOOMONEY_RECEIVER = "4100118749299139"  # кошелек YooMoney

# ===========================================================================
# НАСТРОЙКИ СОЦИАЛЬНЫХ ПРОВАЙДЕРОВ
# ===========================================================================

# Настройки для Google OAuth
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'VERIFIED_EMAIL': True,
        'OAUTH_PKCE_ENABLED': True,
    },
    'yandex': {
        'SCOPE': [
            'login:email',
            'login:info',
        ],
        'VERIFIED_EMAIL': True,
    }
}

# Настройки для социальных аккаунтов
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"  # не требуем подтверждение email для соц. сетей
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_LOGIN_ON_GET = True
# Автоматическая регистрация через соцсети
SOCIALACCOUNT_AUTO_SIGNUP = True

# Переменные окружения для OAuth ключей
GOOGLE_OAUTH2_CLIENT_ID = os.getenv("GOOGLE_OAUTH2_CLIENT_ID", "")
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH2_CLIENT_SECRET", "")
YANDEX_OAUTH2_CLIENT_ID = os.getenv("YANDEX_OAUTH2_CLIENT_ID", "")
YANDEX_OAUTH2_CLIENT_SECRET = os.getenv("YANDEX_OAUTH2_CLIENT_SECRET", "")


SENTRY_DSN = os.getenv("SENTRY_DSN")
SENTRY_ENV = os.getenv("SENTRY_ENV", "dev")
SENTRY_RELEASE = os.getenv("SENTRY_RELEASE")  # можно подставлять git sha
SENTRY_TRACES_SAMPLE_RATE = float(os.getenv("SENTRY_TRACES_SAMPLE_RATE", "0.0"))
SENTRY_PROFILES_SAMPLE_RATE = float(os.getenv("SENTRY_PROFILES_SAMPLE_RATE", "0.0"))
SENTRY_SEND_DEFAULT_PII = os.getenv("SENTRY_SEND_DEFAULT_PII", default=False)

if SENTRY_DSN:
    # Логирование: отправляем event на уровне ERROR, но breadcrumbs с INFO и выше
    logging_integration = LoggingIntegration(
        level=logging.INFO,
        event_level=logging.ERROR,
    )

    def _before_send(event, hint):
        """
        Отсечь шум: healthchecks, DisallowedHost, BrokenPipe и т.п.
        """
        # 1) URL healthcheck
        req = event.get("request", {})
        url = (req.get("url") or "").lower()
        if any(p in url for p in ("/health", "/healthz", "/ready", "/live")):
            return None

        # 2) Исключения, которые обычно не интересны
        exc = hint.get("exc_info")
        ignored_types = (
            "django.core.exceptions.DisallowedHost",
            "django.core.exceptions.SuspiciousFileOperation",
            "django.http.response.ClientDisconnected",
            "BrokenPipeError",
        )
        exc_type = None
        if exc and exc[0]:
            exc_type = f"{exc[0].__module__}.{exc[0].__name__}"
        if exc_type and exc_type in ignored_types:
            return None

        return event

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=SENTRY_ENV,
        release=SENTRY_RELEASE,
        integrations=[
            DjangoIntegration(),
            logging_integration,
        ],
        traces_sample_rate=SENTRY_TRACES_SAMPLE_RATE,   # APM-трейсинг
        profiles_sample_rate=SENTRY_PROFILES_SAMPLE_RATE,  # профайлинг
        send_default_pii=SENTRY_SEND_DEFAULT_PII,       # PII отправлять осознанно
        before_send=_before_send,
    )

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}